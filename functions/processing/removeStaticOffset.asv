function [data_removed_offset] = removeStaticOffset(data, settings, interval_static)

data_removed_offset = data; 

indices_recovery_left = findRecovery(data.F_left(interval_static,1), settings);
indices_pulse_left = ~indices_recovery_left; 

for iComponent = 1 : 3

    data_corrected.F_left(interval,iComponent) = data.F_left(indices_pulse_left,iComponent); 
    data_corrected.F_left(interval,iComponent) = data.F_left(indices_pulse_left,iComponent); 
    
    data_corrected.M_left(interval,iComponent) = data.M_left(interval,iComponent) - mean(data.M_left(interval,iComponent));

    data_corrected.F_right(interval,iComponent) = data.F_right(interval,iComponent) - mean(data.F_right(interval,iComponent));
    data_corrected.M_right(interval,iComponent) = data.M_right(interval,iComponent) - mean(data.M_right(interval,iComponent));
end



indices_recovery_left = logical([indices_recovery_left; zeros(length(interval_static),1)]);

F_left_offset = data.F_left(indices_recovery_left,:);
M_left_offset = data.M_left(indices_recovery_left,:);
Angle_left_offset = data.Angle_left(indices_recovery_left);


f_offset = [F_left_offset, M_left_offset];
Q = [sin(Angle_left_offset), cos(Angle_left_offset), ones(length(Angle_left_offset), 1)];
tolerance = eps * max(size(f_offset)); 
for ctr = 1 : size(f_offset, 2)
    A(:,ctr) = lsqr(Q, f_offset(:,ctr), tolerance);
end

f = [data.F_left(interval_static,:), data.M_left(interval_static,:)];
q = [sin(data.Angle_left(interval_static)), cos(data.Angle_left(interval_static)), ones(length(data.Angle_left(interval_static)), 1)];
f = f - q * A; 

data_removed_offset.F_left(interval_static,:) = f(:,1:3);
data_removed_offset.M_left(interval_static,:) = f(:,4:6);




%% with baseline measurement

% figure()
% plot(data.Angle_left(interval,1))
% hold on 
% % plot(data.F_left(interval,1))
% % plot(polyval(coeffs.F_left(interval,1),data.Angle_left(interval,1)))
% plot(polyval(coeffs.F_left(interval,1),data.Angle_left(interval,1)))

% % force left
% data_removed_offset.F_left(interval,1) = data.F_left(interval,1) - polyval(coeffs.F_left(:,1),data.Angle_left(interval)); 
% data_removed_offset.F_left(interval,2) = data.F_left(interval,2) - polyval(coeffs.F_left(:,2),data.Angle_left(interval)); 
% data_removed_offset.F_left(interval,3) = data.F_left(interval,3) - polyval(coeffs.F_left(:,3),data.Angle_left(interval)); 
% 
% % moment left
% data_removed_offset.M_left(interval,1) = data.M_left(interval,1) - polyval(coeffs.M_left(:,1),data.Angle_left(interval)); 
% data_removed_offset.M_left(interval,2) = data.M_left(interval,2) - polyval(coeffs.M_left(:,2),data.Angle_left(interval)); 
% data_removed_offset.M_left(interval,3) = data.M_left(interval,3) - polyval(coeffs.M_left(:,3),data.Angle_left(interval)); 
% 
% % force right
% data_removed_offset.F_right(interval,1) = data.F_right(interval,1) - polyval(coeffs.F_right(:,1),data.Angle_right(interval)); 
% data_removed_offset.F_right(interval,2) = data.F_right(interval,2) - polyval(coeffs.F_right(:,2),data.Angle_right(interval)); 
% data_removed_offset.F_right(interval,3) = data.F_right(interval,3) - polyval(coeffs.F_right(:,3),data.Angle_right(interval)); 
% 
% % moment right
% data_removed_offset.M_right(interval,1) = data.M_right(interval,1) - polyval(coeffs.M_right(:,1),data.Angle_right(interval)); 
% data_removed_offset.M_right(interval,2) = data.M_right(interval,2) - polyval(coeffs.M_right(:,2),data.Angle_right(interval)); 
% data_removed_offset.M_right(interval,3) = data.M_right(interval,3) - polyval(coeffs.M_right(:,3),data.Angle_right(interval)); 

end